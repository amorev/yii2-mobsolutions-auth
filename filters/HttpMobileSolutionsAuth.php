<?php
/**
 * Created by PhpStorm.
 * User: zvinger
 * Date: 20.12.17
 * Time: 11:18
 */

namespace Zvinger\Auth\Mobsolutions\filters;

use function GuzzleHttp\Psr7\_parse_request_uri;
use yii\base\Action;
use yii\filters\auth\AuthMethod;
use yii\helpers\VarDumper;
use yii\web\Request;
use yii\web\Response;
use yii\web\UnauthorizedHttpException;
use yii\web\User;
use Zvinger\Auth\Mobsolutions\components\MobileSolutionsAuthComponent;
use Zvinger\Auth\Mobsolutions\components\MobileSolutionsLogger;
use Zvinger\Auth\Mobsolutions\exceptions\SignatureCheckException;
use Zvinger\Auth\Mobsolutions\exceptions\WrongAppIdMobileSolutionsAuthException;
use Zvinger\Auth\Mobsolutions\models\auth\AuthenticateData;
use Zvinger\BaseClasses\app\components\user\identity\attributes\status\UserStatusAttribute;

class HttpMobileSolutionsAuth extends AuthMethod
{
    const METHOD_SHA512 = 'sha512mob';

    public $nonActiveUserMethods = [];

    /**
     * @var Action
     */
    private $_running_action;

    /**
     * @var MobileSolutionsAuthComponent
     */
    private $_mobileSolutionsAuthComponent;

    public static $logCategory = 'auth';

    /**
     * @return MobileSolutionsAuthComponent
     */
    private function getMobileSolutionsAuthComponent(): MobileSolutionsAuthComponent
    {
        return $this->_mobileSolutionsAuthComponent;
    }

    /**
     * @param MobileSolutionsAuthComponent $mobileSolutionsAuthComponent
     */
    public function setMobileSolutionsAuthComponent(MobileSolutionsAuthComponent $mobileSolutionsAuthComponent): void
    {
        $this->_mobileSolutionsAuthComponent = $mobileSolutionsAuthComponent;
    }

    /**
     * Authenticates the current user.
     * @param User $user
     * @param Request $request
     * @param Response $response
     * @return bool|\yii\web\IdentityInterface|\Zvinger\BaseClasses\app\components\user\identity\VendorUserIdentity
     * @throws \yii\web\UnauthorizedHttpException
     * @throws \yii\web\UnprocessableEntityHttpException
     * @throws SignatureCheckException
     */
    public function authenticate($user, $request, $response)
    {
        $component = $this->getMobileSolutionsAuthComponent();
        /** @var AuthenticateData $data */
        $properties = [
            'appId'     => \Yii::$app->request->headers->get('X-Auth-AppId'),
            'time'      => \Yii::$app->request->headers->get('X-Auth-Time'),
            'signature' => \Yii::$app->request->headers->get('X-Auth-Signature'),
            'method'    => \Yii::$app->request->headers->get('X-Auth-Method'),
            'rawBody'   => \Yii::$app->request->rawBody,
        ];
        MobileSolutionsLogger::info("Starting auth process: " . print_r($properties, 1));
        $data = \Yii::configure(new AuthenticateData(), $properties);
        try {
            $identity = $component->authenticate($data);
        } catch (WrongAppIdMobileSolutionsAuthException $e) {
            $identity = FALSE;
        }
        $authResult = $component->checkSignature($data);
        if ($authResult !== TRUE) {
            throw new SignatureCheckException("Wrong signature: " . $data->signature);
        }

        if ($identity === FALSE) {
            $this->handleFailure($response);
        }
        $user->login($identity);
        $status = $identity->getUserObject()->status;
        if ($status !== UserStatusAttribute::STATUS_ACTIVATED) {
            if (!in_array($this->_running_action->id, $this->nonActiveUserMethods)) {
                throw new UnauthorizedHttpException("Ваш аккаунт не активирован");
            }
        }

        return $identity;
    }

    public function beforeAction($action)
    {
        $this->_running_action = $action;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
}